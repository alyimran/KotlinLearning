class Person1 (val firstName:String = "Ali",val lastName:String= "Imran")
{
    //secondary constructor
    // we don't even need these init blocks when are using default values. so this class can be converted to the next class
    init {
        println("Init 1")
    }
    // Now in this example and many practical examples, secondary constructor are not necessary due to the power of defalut  constructors
    // we can comment out the secondary constructor and assign default values to firstname and lastname and use Person2 like in line numbwer
    // 27

    constructor():this("Ali" ,"Imran"){
        println("Secondary constructor")
    }

    init {
        println("init 2")
    }
}

class Person2(val firstName:String = "Ali", val lastName:String="Imran")
{
    // above properties are immutable so we only have getters for them
    //lets introduce mutable properties
    //Properties in kotlin get their setters and getters generated by compiler
    //But we can define our own setters and getters
    var nickName:String?=null
        set(value) {
            field=value
            println(value)
        }
        get(){
            println(field)
            return field
        }

}


fun main() {
    // if we pass arguemnents explicitly then primary constructor will be called

    //var person = Person1("1" , "2")
    //output
    //Init 1
    //init 2
    // but notice that when we dont't pass any arguments then secondary constructor will be called
    var person2 = Person1()

//    Init 1
//    init 2
//    Secondary constructor


    var person3 = Person2()
    person3.nickName= "Mano"

    println(person3.firstName)
    println(person3.nickName)

// This shows that init blocks are always going to be called before secondary constructors


}